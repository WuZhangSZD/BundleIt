import { loadStdlib, ask } from '@reach-sh/stdlib';
import * as backend from './build/index.main.mjs';
const stdlib = loadStdlib();

const isDisposal = await ask.ask(
  `Are you Disposal?`,
  ask.yesno
);
const who = isDisposal ? 'Disposal' : 'Collector';

console.log(`Starting BundleIt! as ${who}`);

let acc = null;
const createAcc = await ask.ask(
  `Would you like to create an account? (only possible on devnet)`,
  ask.yesno
);
if (createAcc) {
  acc = await stdlib.newTestAccount(stdlib.parseCurrency(1000));
} else {
  const secret = await ask.ask(
    `What is your account secret?`,
    (x => x)
  );
  acc = await stdlib.newAccountFromSecret(secret);
}

let ctc = null;

if (isDisposal) {
  ctc = acc.contract(backend);
  ctc.getInfo().then((info) => {
    console.log(`The contract is deployed as = ${JSON.stringify(info)}`); });
} else {
  const info = await ask.ask(
    `Please paste the contract information:`,
    JSON.parse
  );
  ctc = acc.contract(backend, info);
}

const fmt = (x) => stdlib.formatCurrency(x, 4);
const getBalance = async () => fmt(await stdlib.balanceOf(acc));

const before = await getBalance();
console.log(`Your balance is ${before}`);

const interact = { ...stdlib.hasRandom };

interact.informTimeout = () => {
  console.log(`There was a timeout.`);
  process.exit(1);
};

if (isDisposal) {
  console.log(`Registering new bundle as Disposal`);
  const bundleID=stdlib.randomUInt();
  console.log(`Generated Bundle ID:${bundleID}`);
  interact.bundleID=bundleID;
  const disposalName=await ask.ask(
    `What is your name?`
  )
  interact.disposalName=disposalName;
  const disposalLocation=await ask.ask(
    `What is your location?`
  )
  interact.disposalLocation=disposalLocation;
  const bundleName=await ask.ask(
    `What is the bundle name?`
  )
  interact.bundleName=bundleName;

  const amt = await ask.ask(
    `What is the bundle Price?`,
    stdlib.parseCurrency
  );
  interact.price = amt;
  interact.deadline = { ETH: 100, ALGO: 100, CFX: 1000 }[stdlib.connector];
} else {
  interact.acceptPrice = async (amt) => {
    const accepted = await ask.ask(
      `Do you want to pay the price of ${fmt(amt)} for this Bundle?`,
      ask.yesno
    );
    if (!accepted) {
      process.exit(0);
    }
  };
}

interact.registerBundle=async (bundleID,bundleName) => {
  console.log(`Bundle created.`);
  console.log(`Bundle ID:${bundleID}`);
  console.log(`Bundle Name:${bundleName}`);
};

const part = isDisposal ? ctc.p.Disposal : ctc.p.Collector;
await part(interact);

const after = await getBalance();
console.log(`Your balance is now ${after}`);

ask.done();